{"version":1,"windowDimensions":{"x":0,"y":23,"width":1280,"height":729,"maximized":true},"grammars":{"grammarOverridesByPath":{}},"project":{"deserializer":"Project","paths":["/Users/nansthomas/Downloads/eleVR-Web-Player-master"],"buffers":[{"id":"a2812ff788e60e75d0b1d50beab682dc","text":"\n<!DOCTYPE html>\n<html>\n<head>\n  <title>eleVR Web Player</title>\n  <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, height=device-height, initial-scale=1.0, maximum-scale=1.0, user-scalable=0\" />\n  <meta name=\"mobile-web-app-capable\" content=\"yes\">\n  <meta name=\"apple-mobile-web-app-capable\" content=\"yes\">\n  <meta name=\"apple-touch-fullscreen\" content=\"yes\">\n  <meta name=\"apple-mobile-web-app-status-bar-style\" content=\"black-translucent\">\n  <link rel=\"icon\" sizes=\"196x196\" href=\"elelogo-square.png\">\n\n  <!-- Fragment shader program -->\n  <script id=\"shader-fs\" type=\"x-shader/x-fragment\">\n  varying mediump vec3 vDirection;\n  uniform mediump float eye;\n  uniform mediump float projection;\n\n  uniform sampler2D uSampler;\n\n  #define PI 3.1415926535897932384626433832795\n\n  mediump vec4 directionToColor(mediump vec3 direction, mediump float eye, mediump float projection) {\n    /*\n    * Input: a direction.  +x = right, +y = up, +z = backward.\n    *        an eye. left = 0, right = 1.\n    *        a projection. see ProjectionEnum in JS file for enum\n    * Output: a color from the video\n    *\n    * Bug alert: the control flow here may screw up texture filtering.\n    */\n\n    mediump float theta = atan(direction.x, -1.0 * direction.z);\n    mediump float phi = atan(direction.y, length(direction.xz));\n\n    /*\n    * The Nexus 7 and the Moto X (and possibly many others) have\n    * a buggy atan2 implementation that screws up when the numerator\n    * (the first argument) is too close to zero.  (The 1e-4 is carefully\n    * chosen: 1e-5 doesn't fix the problem.\n    */\n    if (abs(direction.x) < 1e-4 * abs(direction.z))\n    theta = 0.5*PI * (1.0 - sign(-1.0 * direction.z));\n    if (abs(direction.y) < 1e-4 * length(direction.xz))\n    phi = 0.0;\n\n    // Uncomment to debug the transformations.\n    // return vec4(theta / (2. * PI) + 0.5, phi / (2. * PI) + 0.5, 0., 0.);\n\n    if (projection == 0.) {\n      // Projection == 0: equirectangular projection\n      return texture2D(uSampler, vec2(mod(theta / (2.0*PI), 1.0), phi / PI + 0.5));\n    } else {\n      // Projection == 1: equirectangular top/bottom 3D projection\n      eye = 1. - eye;\n      return texture2D(uSampler, vec2(mod(theta / (2.0*PI), 1.0), ((phi / PI + 0.5) + eye)/ 2.));\n    }\n  }\n\n  void main(void) {\n    gl_FragColor = directionToColor(vDirection, eye, projection);\n  }\n</script>\n\n<!-- Vertex shader program -->\n<script id=\"shader-vs\" type=\"x-shader/x-vertex\">\n  attribute mediump vec2 aVertexPosition;\n\n  uniform mediump mat4 proj_inv;\n\n  varying mediump vec3 vDirection;\n\n  void main(void) {\n    gl_Position = vec4(aVertexPosition, 1.0, 1.0);\n    mediump vec4 projective_direction = proj_inv * gl_Position;\n    vDirection = projective_direction.xyz / projective_direction.w;\n  }\n</script>\n\n<link rel=\"stylesheet\" href=\"css/font-awesome.css\">\n<link rel=\"stylesheet\" href=\"css/elevr-player.css\">\n<script src=\"lib/gl-matrix.js\" type=\"text/javascript\"></script>\n<script src=\"lib/util.js\" type=\"text/javascript\"></script>\n<script src=\"js/controls.js\" type=\"text/javascript\"></script>\n<script src=\"js/player-webgl.js\" type=\"text/javascript\"></script>\n<script src=\"js/webvr.js\" type=\"text/javascript\"></script>\n<script src=\"js/phonevr.js\" type=\"text/javascript\"></script>\n<script src=\"js/elevr-player.js\" type=\"text/javascript\"></script>\n</head>\n\n<body>\n  <div id=\"video-container\">\n    <!-- Loading Message -->\n    <div id=\"left-load\" class=\"left\">\n      <div id=\"title-l\" class=\"title\">Loading Video...</div>\n      <div id=\"message-l\" class=\"message hidden\">Try WASD + Q/E</div>\n    </div>\n    <div id=\"right-load\" class=\"right\">\n      <div id=\"title-r\" class=\"title\">Loading Video...</div>\n      <div id=\"message-r\" class=\"message hidden\">Try WASD + Q/E</div>\n    </div>\n    <div id=\"left-play\" class=\"left hidden\">\n      <a id=\"play-l\" class=\"large-play fa fa-play fa-5x\"></a>\n    </div>\n    <div id=\"right-play\" class=\"right hidden\">\n      <a id=\"play-r\" class=\"large-play fa fa-play fa-5x\"></a>\n    </div>\n\n    <canvas id=\"glcanvas\">\n      Your browser doesn't appear to support the HTML5 <code>&lt;canvas&gt;</code> element.\n    </canvas>\n    <video class=\"hidden\" preload=\"auto\" id=\"video\" loop=\"true\" webkit-playsinline crossOrigin=\"anonymous\">\n      <source src=\"therelaxatron2.mp4\" type=\"video/mp4\">\n      <source src=\"therelaxatron.webm\" type=\"video/webm\">\n    </video>\n        <!-- Video Controls -->\n        <div id=\"video-controls\" class=\"hidden\">\n          <a id=\"play-pause\" class=\"fa fa-play icon\" title=\"Play\"></a>\n\n\n          <input type=\"range\" id=\"seek-bar\" value=\"0\">\n\n          <a id=\"loop\" class=\"fa fa-chain-broken icon\" title=\"Stop Looping\"></a>\n\n          <a id=\"mute\" class=\"fa fa-volume-up icon\" title=\"Mute\"></a>\n\n          <a id=\"select-local-file\" class=\"fa fa-folder-open icon rfloat\" title=\"Select File\"></a>\n\n          <select id=\"projection-select\" class=\"rfloat\">\n            <option value=0>Equirectangular</option>\n            <option value=1>Equirectangular 3D</option>\n          </select>\n\n          <select id=\"video-select\" class=\"rfloat\">\n            <option value=\"0therelaxatron2.mp4\">The Relaxatron (mp4)</option>\n            <option value=\"0therelaxatron.webm\">The Relaxatron (webm)</option>\n            <option value=\"1Vidcon5.mp4\">Vidcon (mp4)</option>\n            <option value=\"1Vidcon.webm\">Vidcon (webm)</option>\n          </select>\n\n          <a id=\"full-screen\" class=\"fa fa-expand icon rfloat\" title=\"Full Screen\"></a>\n        </div>\n\n        <script>runEleVRPlayer();</script>\n      </div>\n\n    </body></html>\n","defaultMarkerLayerId":"0","markerLayers":{"0":{"id":"0","maintainHistory":false,"markersById":{},"version":2},"1":{"id":"1","maintainHistory":false,"markersById":{},"version":2},"2":{"id":"2","maintainHistory":true,"markersById":{"1":{"range":{"start":{"row":21,"column":10},"end":{"row":21,"column":46}},"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"}},"version":2},"4":{"id":"4","maintainHistory":false,"markersById":{},"version":2}},"nextMarkerLayerId":5,"history":{"version":3,"nextCheckpointId":4,"undoStack":[{"type":"group-start","snapshot":{"2":{"1":{"range":[[0,0],[17,3]],"properties":{"type":"selection","goalScreenRange":null},"reversed":true,"tailed":true,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[0,0],[17,3]],"newRange":[[0,0],[0,0]],"oldText":"<!--\n* eleVR Web Player: A web player for 360 video on the Oculus\n* Copyright (C) 2014 Andrea Hawksley and Andrew Lutomirski\n*\n* This program is free software; you can redistribute it and/or\n* modify it under the terms of the GNU General Public License\n* as published by the Free Software Foundation; either version 2\n* of the License, or (at your option) any later version.\n*\n* This program is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n* GNU General Public License for more details.\n*\n* You should have received a copy of the GNU General Public License\n* along with this program; if not, write to the Free Software\n* Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n-->","newText":""}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[0,0],[0,0]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}}],"redoStack":[]},"encoding":"utf8","filePath":"/Users/nansthomas/Downloads/eleVR-Web-Player-master/index.html","digestWhenLastPersisted":"96701168298f6f994e7df8f5350541a84d9e54d4","preferredLineEnding":null,"nextMarkerId":2,"deserializer":"TextBuffer","version":5},{"id":"7ee908e15ce53797e45d09845945d332","text":"/* global canvas, fullScreenButton, loopButton, muteButton, playL, playR, playButton, projectionSelect, quat, seekBar, webGL, video, videoSelect, vrHMD, vrSensor */\n\nvar reqAnimFrameID = 0;\nvar projection = 0;\nvar manualRotation = quat.create(),\n    degtorad = Math.PI / 180;  // Degree-to-Radian conversion\n\n(function(global) {\n  'use strict';\n\n  var videoObjectURL;\n\n  var controls = {\n    manualControls: {\n      'a' : {index: 1, sign: 1, active: 0},\n      'd' : {index: 1, sign: -1, active: 0},\n      'w' : {index: 0, sign: 1, active: 0},\n      's' : {index: 0, sign: -1, active: 0},\n      'q' : {index: 2, sign: -1, active: 0},\n      'e' : {index: 2, sign: 1, active: 0},\n    },\n\n    manualRotateRate: new Float32Array([0, 0, 0]),  // Vector, camera-relative\n\n    create: function() {\n      playButton.addEventListener('click', function() {\n        controls.playPause();\n      });\n\n      playL.addEventListener('click', function() {\n        controls.playPause();\n      });\n\n      playR.addEventListener('click', function() {\n        controls.playPause();\n      });\n\n      loopButton.addEventListener('click', function() {\n        controls.toggleLooping();\n      });\n\n      muteButton.addEventListener('click', function() {\n        if (video.muted === false) {\n          controls.mute();\n        } else {\n          controls.unmute();\n        }\n      });\n\n      fullScreenButton.addEventListener('click', function() {\n        controls.fullscreen();\n      });\n\n      seekBar.addEventListener('change', function() {\n        // Calculate the new time\n        var time = video.duration * (seekBar.value / 100);\n        video.currentTime = time;\n      });\n\n      video.addEventListener('timeupdate', function() {\n        // don't update if paused,\n        // we get last time update after seekBar mousedown pauses\n        if (!video.paused) {\n          // Calculate the slider value\n          var value = (100 / video.duration) * video.currentTime;\n          seekBar.value = value;\n        }\n      });\n\n      // Pause the video when the slider handle is being dragged\n      var tempPause = false;\n      seekBar.addEventListener('mousedown', function() {\n        if (!video.paused) {\n          video.pause();\n          tempPause = true;\n        }\n      });\n\n      seekBar.addEventListener('mouseup', function() {\n        if (tempPause) {\n          video.play();\n        }\n      });\n\n      videoSelect.addEventListener('change', function() {\n        projection = videoSelect.value[0];\n        projectionSelect.value = projection;\n\n        // Remove the hash/querystring if there were custom video parameters.\n        window.history.pushState('', document.title, window.location.pathname);\n\n        controls.loadVideo(videoSelect.value.substring(1));\n\n        var selectedOption = videoSelect.options[videoSelect.selectedIndex];\n        if ('autoplay' in selectedOption.dataset) {\n          controls.play();\n        }\n      });\n\n\n      projectionSelect.addEventListener('change', function() {\n        projection = projectionSelect.value;\n      });\n\n      document.getElementById('select-local-file').addEventListener('click', function(event) {\n        event.preventDefault();\n        controls.selectLocalVideo();\n      });\n    },\n\n    enableKeyControls: function() {\n      function key(event, sign) {\n        var control = controls.manualControls[String.fromCharCode(event.keyCode).toLowerCase()];\n        if (!control)\n          return;\n        if (sign === 1 && control.active || sign === -1 && !control.active)\n          return;\n        control.active = (sign === 1);\n        controls.manualRotateRate[control.index] += sign * control.sign;\n      }\n\n      function onkey(event) {\n        switch (String.fromCharCode(event.charCode)) {\n        case 'f':\n          controls.fullscreen();\n          break;\n        case 'z':\n          vrSensor.zeroSensor();\n          break;\n        case 'p':\n          controls.playPause();\n          break;\n        case ' ': //spacebar\n          controls.playPause();\n          break;\n        case 'g':\n          controls.fullscreenIgnoreHMD();\n          break;\n        case 'l':\n          controls.toggleLooping();\n          break;\n        }\n      }\n\n      document.addEventListener('keydown', function(event) { key(event, 1); },\n              false);\n      document.addEventListener('keyup', function(event) { key(event, -1); },\n              false);\n      window.addEventListener('keypress', onkey, true);\n    },\n\n    /**\n     * Video Commands\n     */\n    loaded: function() {\n      window.leftLoad.classList.add('hidden');\n      window.rightLoad.classList.add('hidden');\n      if (video.paused) {\n        window.leftPlay.classList.remove('hidden');\n        window.rightPlay.classList.remove('hidden');\n      }\n    },\n\n    play: function() {\n      if (video.ended) {\n        video.currentTime = 0.1;\n      }\n\n      video.play();\n      if (!video.paused) { // In case somehow hitting play button doesn't work.\n        window.leftPlay.classList.add('hidden');\n        window.rightPlay.classList.add('hidden');\n\n        window.playButton.className = 'fa fa-pause icon';\n        window.playButton.title = 'Pause';\n\n        reqAnimFrameID = requestAnimationFrame(webGL.drawScene);\n      }\n    },\n\n    pause: function() {\n      video.pause();\n\n      window.playButton.className = 'fa fa-play icon';\n      window.playButton.title = 'Play';\n\n      window.leftPlay.classList.remove('hidden');\n      window.rightPlay.classList.remove('hidden');\n    },\n\n    playPause: function() {\n      if (video.paused === true) {\n        controls.play();\n      } else {\n        controls.pause();\n      }\n    },\n\n    setLooping: function(loop) {\n      loop = !!loop;\n      if (video.loop !== loop) {\n        controls.toggleLooping();\n      }\n    },\n\n    toggleLooping: function() {\n      if (video.loop === true) {\n        loopButton.className = 'fa fa-refresh icon';\n        loopButton.title = 'Start Looping';\n        video.loop = false;\n      } else {\n        loopButton.className = 'fa fa-chain-broken icon';\n        loopButton.title = 'Stop Looping';\n        video.loop = true;\n      }\n    },\n\n    ended: function() {\n      controls.pause();\n      if (reqAnimFrameID) {\n        cancelAnimationFrame(reqAnimFrameID);\n        reqAnimFrameID = 0;\n      }\n    },\n\n    mute: function() {\n      if (video.muted) {\n        return;\n      }\n      video.muted = true;\n      window.muteButton.className = 'fa fa-volume-off icon';\n      window.muteButton.title = 'Unmute';\n    },\n\n    unmute: function() {\n      if (!video.muted) {\n        return;\n      }\n      video.muted = false;\n      window.muteButton.className = 'fa fa-volume-up icon';\n      window.muteButton.title = 'Mute';\n    },\n\n    selectLocalVideo: function() {\n      var input = document.createElement('input');\n      input.type = 'file';\n      input.accept = 'video/*';\n\n      input.addEventListener('change', function () {\n        var files = input.files;\n        if (!files.length) {\n          // The user didn't select anything.  Sad.\n          console.log('File selection canceled');\n          return;\n        }\n\n        videoObjectURL = URL.createObjectURL(files[0]);\n        console.log('Loading local file ', files[0].name, ' at URL ', videoObjectURL);\n        videoSelect.value = '';\n        controls.loadVideo(videoObjectURL);\n      });\n\n      input.click();\n    },\n\n    loadVideo: function(videoFile) {\n      controls.pause();\n      window.leftPlay.classList.add('hidden');\n      window.rightPlay.classList.add('hidden');\n      window.leftLoad.classList.remove('hidden');\n      window.rightLoad.classList.remove('hidden');\n\n      webGL.gl.clear(webGL.gl.COLOR_BUFFER_BIT);\n\n      if (reqAnimFrameID) {\n        cancelAnimationFrame(reqAnimFrameID);\n        reqAnimFrameID = 0;\n      }\n\n      // Hack to fix rotation for vidcon video for vidcon\n      if (videoFile === 'videos/Vidcon.webm' || videoFile === 'videos/Vidcon5.mp4') {\n        manualRotation = [0.38175851106643677, -0.7102527618408203, -0.2401944249868393, 0.5404701232910156];\n      } else {\n        manualRotation = quat.create();\n      }\n\n      var oldObjURL = videoObjectURL;\n      videoObjectURL = null;\n\n      video.src = videoFile;\n\n      if (videoObjectURL && videoObjectURL !== videoFile) {\n        URL.removeObjectURL(oldObjURL);\n      }\n    },\n\n    fullscreen: function() {\n      if (canvas.mozRequestFullScreen) {\n        canvas.mozRequestFullScreen({ vrDisplay: vrHMD }); // Firefox\n      } else if (canvas.webkitRequestFullscreen) {\n        canvas.webkitRequestFullscreen({ vrDisplay: vrHMD }); // Chrome and Safari\n      } else if (canvas.requestFullScreen){\n        canvas.requestFullscreen();\n      }\n    },\n\n    fullscreenIgnoreHMD: function() {\n      if (canvas.mozRequestFullScreen) {\n        canvas.mozRequestFullScreen(); // Firefox\n      } else if (canvas.webkitRequestFullscreen) {\n        canvas.webkitRequestFullscreen(); // Chrome and Safari\n      } else if (canvas.requestFullScreen){\n        canvas.requestFullscreen();\n      }\n    },\n\n    hide: function() {\n      window.videoControls.classList.add('hidden');\n      window.messageL.classList.add('hidden');\n      window.messageR.classList.add('hidden');\n    },\n\n    show: function() {\n      window.videoControls.classList.remove('hidden');\n      window.messageL.classList.remove('hidden');\n      window.messageR.classList.remove('hidden');\n    }\n  };\n\n  global.controls = controls;\n\n})(window);\n","defaultMarkerLayerId":"0","markerLayers":{"0":{"id":"0","maintainHistory":false,"markersById":{},"version":2},"1":{"id":"1","maintainHistory":false,"markersById":{},"version":2},"2":{"id":"2","maintainHistory":true,"markersById":{"1":{"range":{"start":{"row":0,"column":0},"end":{"row":0,"column":0}},"properties":{"type":"selection"},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}},"version":2},"4":{"id":"4","maintainHistory":false,"markersById":{},"version":2}},"nextMarkerLayerId":5,"history":{"version":3,"nextCheckpointId":1,"undoStack":[],"redoStack":[]},"encoding":"utf8","filePath":"/Users/nansthomas/Downloads/eleVR-Web-Player-master/js/controls.js","digestWhenLastPersisted":"84efd3b6de5d781164371c09fb4b63c8cd84d64b","preferredLineEnding":null,"nextMarkerId":2,"deserializer":"TextBuffer","version":5},{"id":"e4bc764678714620432295cdd693b56d","text":"/**\n * eleVR Web Player: A web player for 360 video on the Oculus\n * Copyright (C) 2014 Andrea Hawksley and Andrew Lutomirski\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the Mozilla Public License; either version 2\n * of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n */\n/* global controls, projection, util, webGL, webVR */\n\n'use strict';\n\nvar currentScreenOrientation = window.orientation || 0; // active default\n\nvar timing = {showTiming: false, // Switch to true to show frame times in the console\n              frameTime: 0,\n              prevFrameTime: 0,\n              canvasResized: 0,\n              textureLoaded: 0,\n              textureTime: 0,\n              start: 0,\n              end: 0,\n              framesSinceIssue: 0\n              };\n\nvar called = {};\nvar videoOptions = {};\n\nfunction resizeContainer() {\n  if (!window.container) {\n    window.container = document.getElementById('video-container');\n  }\n\n  window.container.style.width = window.innerWidth + 'px';\n  window.container.style.height = window.innerHeight + 'px';\n}\n\nwindow.addEventListener('resize', resizeContainer);\n\nfunction setupControls() {\n  if (called.setupControls) {\n    return;\n  }\n\n  window.videoControls = document.getElementById('video-controls');\n  window.messageL = document.getElementById('message-l');\n  window.messageR = document.getElementById('message-r');\n\n  resizeContainer();\n\n  window.leftLoad = document.getElementById('left-load');\n  window.rightLoad = document.getElementById('right-load');\n  window.leftPlay = document.getElementById('left-play');\n  window.rightPlay = document.getElementById('right-play');\n  window.canvas = document.getElementById('glcanvas');\n  window.video = document.getElementById('video');\n\n  // Buttons\n  window.playButton = document.getElementById('play-pause');\n  window.playL = document.getElementById('play-l');\n  window.playR = document.getElementById('play-r');\n  window.muteButton = document.getElementById('mute');\n  window.loopButton = document.getElementById('loop');\n  window.fullScreenButton = document.getElementById('full-screen');\n\n  // Sliders\n  window.seekBar = document.getElementById('seek-bar');\n\n  // Selectors\n  window.videoSelect = document.getElementById('video-select');\n  window.projectionSelect = document.getElementById('projection-select');\n\n  document.getElementById('title-l').style.fontSize = window.outerHeight / 20 + 'px';\n  document.getElementById('title-r').style.fontSize = window.outerHeight / 20 + 'px';\n\n  window.messageL.style.fontSize = window.outerHeight / 30 + 'px';\n  window.messageR.style.fontSize = window.outerHeight / 30 + 'px';\n\n  controls.create();\n\n  called.setupControls = true;\n}\n\nfunction runEleVRPlayer() {\n  if (called.runEleVRPlayer) {\n    return;\n  }\n\n  setupControls();\n\n  webVR.initWebVR();\n\n  webGL.initWebGL();\n\n  if (webGL.gl) {\n    webGL.gl.clearColor(0.0, 0.0, 0.0, 0.0);\n    webGL.gl.clearDepth(1.0);\n    webGL.gl.disable(webGL.gl.DEPTH_TEST);\n\n    util.setCanvasSize();\n\n    // Keyboard Controls\n    controls.enableKeyControls();\n\n    window.shader = new webGL.Shader({\n      fragmentShaderName: 'shader-fs',\n      vertexShaderName: 'shader-vs',\n      attributes: ['aVertexPosition'],\n      uniforms: ['uSampler', 'eye', 'projection', 'proj_inv'],\n    });\n\n    webGL.initBuffers();\n    webGL.initTextures();\n\n    window.video.addEventListener('canplaythrough', controls.loaded);\n    window.video.addEventListener('ended', controls.ended);\n\n    // Keep a record of all the videos that are in the drop-down menu.\n    Array.prototype.slice.call(window.videoSelect.options).forEach(function(option) {\n      videoOptions[option.value] = option;\n    });\n  }\n\n  initFromSettings(window.location.hash || window.location.search);\n\n  called.runEleVRPlayer = true;\n}\n\nfunction initFromSettings(newSettings) {\n  if (!newSettings) {\n    controls.show();\n    return;\n  }\n\n  var settings = util.getTruthyURLSearchParams(newSettings, {\n    autoplay: undefined,\n    controls: true,\n    loop: true,\n    sound: true,\n    projection: 'mono'\n  });\n\n  if (settings.controls) {\n    controls.show();\n  } else {\n    controls.hide();\n\n    if (typeof settings.autoplay === 'undefined') {\n      // `autoplay` by default if controls are hidden and no explicit `autoplay` param set.\n      settings.autoplay = true;\n    }\n  }\n\n  if (settings.sound) {\n    controls.unmute();\n  } else {\n    controls.mute();\n  }\n\n  settings.projection = util.getCustomProjection(settings.projection);\n\n  if (projection !== settings.projection) {\n    projection = settings.projection;\n\n    if (window.projectionSelect) {\n      window.projectionSelect.value = settings.projection;\n    }\n  }\n\n  controls.setLooping(settings.loop);\n\n  if (settings.video) {\n    window.video.innerHTML = '';\n\n    if (window.videoSelect) {\n      var optionValue = settings.projection + settings.video;\n\n      if (optionValue in videoOptions) {\n        videoOptions[optionValue].selected = true;\n      } else {\n        var option = document.createElement('option');\n        option.selected = true;\n        option.textContent = settings.title || util.getVideoTitle(settings.video);\n\n        // Note: The controls code expects the filename to be prefixed with '0' or '1'.\n        option.value = optionValue;\n\n        if (settings.autoplay) {\n          option.dataset.autoplay = '';\n        } else {\n          delete option.dataset.autoplay;\n        }\n\n        videoOptions[optionValue] = option;\n\n        window.videoSelect.appendChild(option);\n      }\n    }\n\n    controls.loadVideo(settings.video);\n  }\n\n  if (settings.autoplay) {\n    controls.play();\n  } else if (settings.autoplay === false) {\n    // If user did not explicitly set `autoplay`, don't pause unnecessarily.\n    window.video.pause();\n  }\n}\n\nwindow.addEventListener('hashchange', function() {\n  // Remove the querystring if there were custom parameters.\n  window.history.pushState('', document.title, window.location.pathname + window.location.hash);\n\n  initFromSettings(window.location.hash);\n});\n\nwindow.addEventListener('message', function(e) {\n  if (typeof e.data === 'object') {\n    window.location.hash = '#' + JSON.stringify(e.data);\n  } else if (typeof e.data === 'string') {\n    window.location.hash = '#' + e.data;\n  } else {\n    return;\n  }\n});\n","defaultMarkerLayerId":"0","markerLayers":{"0":{"id":"0","maintainHistory":false,"markersById":{},"version":2},"1":{"id":"1","maintainHistory":false,"markersById":{},"version":2},"2":{"id":"2","maintainHistory":true,"markersById":{"1":{"range":{"start":{"row":0,"column":0},"end":{"row":0,"column":0}},"properties":{"type":"selection"},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}},"version":2},"4":{"id":"4","maintainHistory":false,"markersById":{},"version":2}},"nextMarkerLayerId":5,"history":{"version":3,"nextCheckpointId":1,"undoStack":[],"redoStack":[]},"encoding":"utf8","filePath":"/Users/nansthomas/Downloads/eleVR-Web-Player-master/js/elevr-player.js","digestWhenLastPersisted":"308a7e725f1df8d805affbe5eb1fab1fa2dcb9bc","preferredLineEnding":null,"nextMarkerId":2,"deserializer":"TextBuffer","version":5},{"id":"e4424c9d0adcd2738ced8dc01d402957","text":"\"use strict\";\n\n// It seems to be impossible to synchronously detect whether we have an orientation sensor.\n// Even Chromium on the desktop has a 'deviceorientation' event, and it will fire once with\n// all nulls.\n\nfunction PhoneVR() {\n    this.deviceAlpha = null;\n    this.deviceGamma = null;\n    this.deviceBeta = null;\n\n    window.addEventListener('deviceorientation', function(orientation) {\n        this.deviceAlpha = orientation.alpha;\n        this.deviceGamma = orientation.gamma;\n        this.deviceBeta = orientation.beta;\n    }.bind(this));\n}\n\nPhoneVR.prototype.orientationIsAvailable = function() {\n    return this.deviceAlpha !== null;\n}\n\nPhoneVR.prototype.rotationQuat = function() {\n    if (!this.orientationIsAvailable())\n        return quat.create(1, 0, 0, 0);\n\n    var degtorad = Math.PI / 180; // Degree-to-Radian conversion\n    var z = this.deviceAlpha * degtorad / 2;\n    var x = this.deviceBeta * degtorad / 2;\n    var y = this.deviceGamma * degtorad / 2;\n    var cX = Math.cos(x);\n    var cY = Math.cos(y);\n    var cZ = Math.cos(z);\n    var sX = Math.sin(x);\n    var sY = Math.sin(y);\n    var sZ = Math.sin(z);\n\n    // ZXY quaternion construction.\n    var w = cX * cY * cZ - sX * sY * sZ;\n    var x = sX * cY * cZ - cX * sY * sZ;\n    var y = cX * sY * cZ + sX * cY * sZ;\n    var z = cX * cY * sZ + sX * sY * cZ;\n\n    var deviceQuaternion = quat.fromValues(x, y, z, w);\n\n    // Correct for the screen orientation.\n    var screenOrientation = (util.getScreenOrientation() * degtorad)/2;\n    var screenTransform = [0, 0, -Math.sin(screenOrientation), Math.cos(screenOrientation)];\n\n    var deviceRotation = quat.create();\n    quat.multiply(deviceRotation, deviceQuaternion, screenTransform);\n\n    // deviceRotation is the quaternion encoding of the transformation\n    // from camera coordinates to world coordinates.  The problem is that\n    // our shader uses conventional OpenGL coordinates\n    // (+x = right, +y = up, +z = backward), but the DeviceOrientation\n    // spec uses different coordinates (+x = East, +y = North, +z = up).\n    // To fix the mismatch, we need to fix this.  We'll arbitrarily choose\n    // North to correspond to -z (the default camera direction).\n    var r22 = Math.sqrt(0.5);\n    quat.multiply(deviceRotation, quat.fromValues(-r22, 0, 0, r22), deviceRotation);\n\n    return deviceRotation;\n}\n","defaultMarkerLayerId":"0","markerLayers":{"0":{"id":"0","maintainHistory":false,"markersById":{},"version":2},"1":{"id":"1","maintainHistory":false,"markersById":{},"version":2},"2":{"id":"2","maintainHistory":true,"markersById":{"1":{"range":{"start":{"row":0,"column":0},"end":{"row":0,"column":0}},"properties":{"type":"selection"},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}},"version":2},"4":{"id":"4","maintainHistory":false,"markersById":{},"version":2}},"nextMarkerLayerId":5,"history":{"version":3,"nextCheckpointId":1,"undoStack":[],"redoStack":[]},"encoding":"utf8","filePath":"/Users/nansthomas/Downloads/eleVR-Web-Player-master/js/phonevr.js","digestWhenLastPersisted":"f6288d0e79e36b9102e75d66d9836fc4dd8b5985","preferredLineEnding":null,"nextMarkerId":2,"deserializer":"TextBuffer","version":5},{"id":"c6a309f87ecc991adb3e79290bdd9ec1","text":"var positionsBuffer, verticesIndexBuffer, texture;\nvar vrHMD, vrSensor;\n\n/*jshint -W069 */\n\n(function(global) {\n  'use strict';\n\n  var webGL = {\n    gl: null,\n\n    initWebGL: function() {\n      webGL.gl = null;\n\n      try {\n        webGL.gl = canvas.getContext(\"webgl\") || canvas.getContext(\"experimental-webgl\");\n      } catch(e) {}\n\n      if (!webGL.gl) {\n        alert(\"Unable to initialize WebGL. Your browser may not support it.\");\n      }\n    },\n\n    getPhoneVR: function() {\n      if (!webGL.phoneVR) {\n        // Create once and make it a property on the object for easy lookup later.\n        webGL.phoneVR = new PhoneVR();\n      }\n\n      return webGL.phoneVR;\n    },\n\n    initBuffers: function() {\n      positionsBuffer = webGL.gl.createBuffer();\n      webGL.gl.bindBuffer(webGL.gl.ARRAY_BUFFER, positionsBuffer);\n      var positions = [\n        -1.0, -1.0,\n         1.0, -1.0,\n         1.0,  1.0,\n        -1.0,  1.0,\n      ];\n      webGL.gl.bufferData(webGL.gl.ARRAY_BUFFER, new Float32Array(positions), webGL.gl.STATIC_DRAW);\n\n      verticesIndexBuffer = webGL.gl.createBuffer();\n      webGL.gl.bindBuffer(webGL.gl.ELEMENT_ARRAY_BUFFER, verticesIndexBuffer);\n      var vertexIndices = [\n        0,  1,  2,      0,  2,  3,\n      ];\n      webGL.gl.bufferData(webGL.gl.ELEMENT_ARRAY_BUFFER,\n          new Uint16Array(vertexIndices), webGL.gl.STATIC_DRAW);\n    },\n\n    initTextures: function() {\n      texture = webGL.gl.createTexture();\n      webGL.gl.bindTexture(webGL.gl.TEXTURE_2D, texture);\n      webGL.gl.texParameteri(webGL.gl.TEXTURE_2D, webGL.gl.TEXTURE_MAG_FILTER, webGL.gl.LINEAR);\n      webGL.gl.texParameteri(webGL.gl.TEXTURE_2D, webGL.gl.TEXTURE_MIN_FILTER, webGL.gl.LINEAR);\n      webGL.gl.texParameteri(webGL.gl.TEXTURE_2D, webGL.gl.TEXTURE_WRAP_S, webGL.gl.CLAMP_TO_EDGE);\n      webGL.gl.texParameteri(webGL.gl.TEXTURE_2D, webGL.gl.TEXTURE_WRAP_T, webGL.gl.CLAMP_TO_EDGE);\n      webGL.gl.bindTexture(webGL.gl.TEXTURE_2D, null);\n      timing.textureTime = undefined;\n    },\n\n    updateTexture: function() {\n        webGL.gl.bindTexture(webGL.gl.TEXTURE_2D, texture);\n        webGL.gl.pixelStorei(webGL.gl.UNPACK_FLIP_Y_WEBGL, true);\n        webGL.gl.texImage2D(webGL.gl.TEXTURE_2D, 0, webGL.gl.RGB, webGL.gl.RGB,\n          webGL.gl  .UNSIGNED_BYTE, video);\n        webGL.gl.bindTexture(webGL.gl.TEXTURE_2D, null);\n        timing.textureTime = video.currentTime;\n    },\n\n    /**\n     * Shader Related Functions\n     **/\n    Shader: function(params) {\n      this.params = params;\n      this.fragmentShader = webGL.getShaderByName(this.params.fragmentShaderName);\n      this.vertexShader = webGL.getShaderByName(this.params.vertexShaderName);\n\n      this.program = webGL.gl.createProgram();\n      webGL.gl.attachShader(this.program, this.vertexShader);\n      webGL.gl.attachShader(this.program, this.fragmentShader);\n      webGL.gl.linkProgram(this.program);\n\n      if (!webGL.gl.getProgramParameter(this.program, webGL.gl.LINK_STATUS)) {\n        alert(\"Unable to initialize the shader program: \" + webGL.gl.getProgramInfoLog(this.program));\n      }\n\n      webGL.gl.useProgram(this.program);\n\n      this.attributes = {};\n      for (var i = 0; i < this.params.attributes.length; i++) {\n        var attributeName = this.params.attributes[i];\n        this.attributes[attributeName] = webGL.gl.getAttribLocation(this.program, attributeName);\n        webGL.gl.enableVertexAttribArray(this.attributes[attributeName]);\n      }\n\n      this.uniforms = {};\n      for (i = 0; i < this.params.uniforms.length; i++) {\n        var uniformName = this.params.uniforms[i];\n        this.uniforms[uniformName] = webGL.gl.getUniformLocation(this.program, uniformName);\n        webGL.gl.enableVertexAttribArray(this.attributes[uniformName]);\n      }\n    },\n\n    getShaderByName: function(id) {\n      var shaderScript = document.getElementById(id);\n\n      if (!shaderScript) {\n        return null;\n      }\n\n      var theSource = \"\";\n      var currentChild = shaderScript.firstChild;\n\n      while(currentChild) {\n        if (currentChild.nodeType === 3) {\n          theSource += currentChild.textContent;\n        }\n\n        currentChild = currentChild.nextSibling;\n      }\n\n      var result;\n\n      if (shaderScript.type === \"x-shader/x-fragment\") {\n        result = webGL.gl.createShader(webGL.gl.FRAGMENT_SHADER);\n      } else if (shaderScript.type === \"x-shader/x-vertex\") {\n        result = webGL.gl.createShader(webGL.gl.VERTEX_SHADER);\n      } else {\n        return null;  // Unknown shader type\n      }\n\n      webGL.gl.shaderSource(result, theSource);\n      webGL.gl.compileShader(result);\n\n      if (!webGL.gl.getShaderParameter(result, webGL.gl.COMPILE_STATUS)) {\n        alert(\"An error occurred compiling the shaders: \" + webGL.gl.getShaderInfoLog(result));\n        return null;\n      }\n\n      return result;\n    },\n\n    /**\n     * Drawing the scene\n     */\n     drawOneEye: function(eye, projectionMatrix) {\n      webGL.gl.useProgram(shader.program);\n\n      webGL.gl.bindBuffer(webGL.gl.ARRAY_BUFFER, positionsBuffer);\n      webGL.gl.vertexAttribPointer(shader.attributes['aVertexPosition'], 2, webGL.gl.FLOAT, false, 0, 0);\n\n      // Specify the texture to map onto the faces.\n      webGL.gl.activeTexture(webGL.gl.TEXTURE0);\n      webGL.gl.bindTexture(webGL.gl.TEXTURE_2D, texture);\n      webGL.gl.uniform1i(shader.uniforms['uSampler'], 0);\n\n      webGL.gl.uniform1f(shader.uniforms['eye'], eye);\n      webGL.gl.uniform1f(shader.uniforms['projection'], projection);\n\n      var rotation = mat4.create();\n      var totalRotation = quat.create();\n\n      if(typeof vrSensor !== 'undefined') {\n        var state = vrSensor.getState();\n        if (state !== null && state.orientation !== null && typeof state.orientation !== 'undefined' &&\n                  state.orientation.x !== 0 &&\n                  state.orientation.y !== 0 &&\n                  state.orientation.z !== 0 &&\n                  state.orientation.w !== 0) {\n          var sensorOrientation = new Float32Array([state.orientation.x, state.orientation.y, state.orientation.z, state.orientation.w]);\n          quat.multiply(totalRotation, manualRotation, sensorOrientation);\n        } else {\n          totalRotation = manualRotation;\n        }\n        mat4.fromQuat(rotation, totalRotation);\n      } else {\n        quat.multiply(totalRotation, manualRotation, webGL.getPhoneVR().rotationQuat());\n        mat4.fromQuat(rotation, totalRotation);\n      }\n\n      var projectionInverse = mat4.create();\n      mat4.invert(projectionInverse, projectionMatrix);\n      var inv = mat4.create();\n      mat4.multiply(inv, rotation, projectionInverse);\n\n      webGL.gl.uniformMatrix4fv(shader.uniforms['proj_inv'], false, inv);\n\n      if (eye === 0) { // left eye\n        webGL.gl.viewport(0, 0, canvas.width, canvas.height);\n      } else { // right eye\n        webGL.gl.viewport(canvas.width, 0, canvas.width, canvas.height);\n      }\n\n      // Draw\n      webGL.gl.bindBuffer(webGL.gl.ELEMENT_ARRAY_BUFFER, verticesIndexBuffer);\n      webGL.gl.drawElements(webGL.gl.TRIANGLES, 6, webGL.gl.UNSIGNED_SHORT, 0);\n    },\n\n    drawScene: function(frameTime) {\n      timing.frameTime = frameTime;\n      if (timing.showTiming) {\n        timing.start = performance.now();\n      }\n\n      util.setCanvasSize();\n\n      if (timing.showTiming) {\n        timing.canvasResized = performance.now();\n      }\n\n      webGL.updateTexture();\n\n      if (timing.showTiming) {\n        timing.textureLoaded = performance.now();\n      }\n\n      if (timing.prevFrameTime) {\n        // Apply manual controls.\n        var interval = (timing.frameTime - timing.prevFrameTime) * 0.001;\n\n        var update = quat.fromValues(controls.manualRotateRate[0] * interval,\n                                     controls.manualRotateRate[1] * interval,\n                                     controls.manualRotateRate[2] * interval, 1.0);\n        quat.normalize(update, update);\n        quat.multiply(manualRotation, manualRotation, update);\n      }\n\n      var perspectiveMatrix = mat4.create();\n      if (typeof vrHMD !== 'undefined') {\n        var leftParams = vrHMD.getEyeParameters('left');\n        var rightParams = vrHMD.getEyeParameters('right');\n        perspectiveMatrix = util.mat4PerspectiveFromVRFieldOfView(leftParams.recommendedFieldOfView, 0.1, 10);\n        webGL.drawOneEye(0, perspectiveMatrix);\n        perspectiveMatrix = util.mat4PerspectiveFromVRFieldOfView(rightParams.recommendedFieldOfView, 0.1, 10);\n        webGL.drawOneEye(1, perspectiveMatrix);\n      } else {\n        var ratio = (canvas.width/2)/canvas.height;\n        mat4.perspective(perspectiveMatrix, Math.PI/2, ratio, 0.1, 10);\n        webGL.drawOneEye(0, perspectiveMatrix);\n        webGL.drawOneEye(1, perspectiveMatrix);\n      }\n\n\n      if (timing.showTiming) {\n        webGL.gl.finish();\n        timing.end = performance.now();\n        if (timing.end - timing.frameTime > 20) {\n          console.log(timing.framesSinceIssue + ' Frame time: ' +\n                      (timing.start - timing.frameTime) + 'ms animation frame lag + ' +\n                      (timing.canvasResized - timing.start) + 'ms canvas resized + ' +\n                      (timing.textureLoaded - timing.canvasResized) + 'ms to load texture + ' +\n                      (timing.end - timing.textureLoaded) + 'ms = ' + (timing.end - timing.frameTime) + 'ms');\n          timing.framesSinceIssue = 0;\n        } else {\n          timing.framesSinceIssue++;\n        }\n      }\n\n      reqAnimFrameID = requestAnimationFrame(webGL.drawScene);\n      timing.prevFrameTime = timing.frameTime;\n    }\n  };\n\nglobal.webGL = webGL;\n\n})(window);\n","defaultMarkerLayerId":"0","markerLayers":{"0":{"id":"0","maintainHistory":false,"markersById":{"9":{"range":{"start":{"row":193,"column":72},"end":{"row":193,"column":72}},"properties":{},"reversed":false,"tailed":true,"valid":false,"invalidate":"overlap"},"86":{"range":{"start":{"row":194,"column":7},"end":{"row":194,"column":7}},"properties":{},"reversed":false,"tailed":true,"valid":false,"invalidate":"overlap"},"97":{"range":{"start":{"row":194,"column":7},"end":{"row":194,"column":7}},"properties":{},"reversed":false,"tailed":true,"valid":false,"invalidate":"overlap"}},"version":2},"1":{"id":"1","maintainHistory":false,"markersById":{},"version":2},"2":{"id":"2","maintainHistory":true,"markersById":{"1":{"range":{"start":{"row":67,"column":20},"end":{"row":67,"column":20}},"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}},"version":2},"4":{"id":"4","maintainHistory":false,"markersById":{},"version":2}},"nextMarkerLayerId":5,"history":{"version":3,"nextCheckpointId":78,"undoStack":[{"type":"group-start","snapshot":{"2":{"1":{"range":[[193,76],[193,76]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[193,76],[193,76]],"newRange":[[193,76],[194,0]],"oldText":"","newText":"\n"}},{"type":"change","content":{"oldRange":[[194,0],[194,0]],"newRange":[[194,0],[194,8]],"oldText":"","newText":"        "}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[194,8],[194,8]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"group-start","snapshot":{"2":{"1":{"range":[[194,8],[194,8]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[194,8],[194,8]],"newRange":[[194,8],[194,9]],"oldText":"","newText":"e"}},{"type":"change","content":{"oldRange":[[194,9],[194,9]],"newRange":[[194,9],[194,10]],"oldText":"","newText":"l"}},{"type":"change","content":{"oldRange":[[194,10],[194,10]],"newRange":[[194,10],[194,11]],"oldText":"","newText":"s"}},{"type":"change","content":{"oldRange":[[194,11],[194,11]],"newRange":[[194,11],[194,12]],"oldText":"","newText":"e"}},{"type":"change","content":{"oldRange":[[194,12],[194,12]],"newRange":[[194,12],[194,13]],"oldText":"","newText":" "}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[194,13],[194,13]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"group-start","snapshot":{"2":{"1":{"range":[[194,13],[194,13]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[194,12],[194,13]],"newRange":[[194,12],[194,12]],"oldText":" ","newText":""}},{"type":"change","content":{"oldRange":[[194,11],[194,12]],"newRange":[[194,11],[194,11]],"oldText":"e","newText":""}},{"type":"change","content":{"oldRange":[[194,10],[194,11]],"newRange":[[194,10],[194,10]],"oldText":"s","newText":""}},{"type":"change","content":{"oldRange":[[194,9],[194,10]],"newRange":[[194,9],[194,9]],"oldText":"l","newText":""}},{"type":"change","content":{"oldRange":[[194,8],[194,9]],"newRange":[[194,8],[194,8]],"oldText":"e","newText":""}},{"type":"change","content":{"oldRange":[[194,4],[194,8]],"newRange":[[194,4],[194,4]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[194,0],[194,4]],"newRange":[[194,0],[194,0]],"oldText":"    ","newText":""}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[194,0],[194,0]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"group-start","snapshot":{"2":{"1":{"range":[[194,0],[194,0]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[193,76],[194,0]],"newRange":[[193,76],[193,76]],"oldText":"\n","newText":""}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[193,76],[193,76]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"group-start","snapshot":{"2":{"1":{"range":[[193,40],[193,40]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[193,39],[193,40]],"newRange":[[193,39],[193,39]],"oldText":"2","newText":""}},{"type":"change","content":{"oldRange":[[193,38],[193,39]],"newRange":[[193,38],[193,38]],"oldText":"/","newText":""}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[193,38],[193,38]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"group-start","snapshot":{"2":{"1":{"range":[[193,57],[193,57]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[193,56],[193,57]],"newRange":[[193,56],[193,56]],"oldText":"2","newText":""}},{"type":"change","content":{"oldRange":[[193,55],[193,56]],"newRange":[[193,55],[193,55]],"oldText":"/","newText":""}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[193,55],[193,55]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"group-start","snapshot":{"2":{"1":{"range":[[191,46],[191,46]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[191,45],[191,46]],"newRange":[[191,45],[191,45]],"oldText":"2","newText":""}},{"type":"change","content":{"oldRange":[[191,44],[191,45]],"newRange":[[191,44],[191,44]],"oldText":"/","newText":""}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[191,44],[191,44]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"group-start","snapshot":{"2":{"1":{"range":[[67,18],[67,18]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[67,18],[67,18]],"newRange":[[67,18],[67,20]],"oldText":"","newText":"  "}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[67,20],[67,20]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}}],"redoStack":[]},"encoding":"utf8","filePath":"/Users/nansthomas/Downloads/eleVR-Web-Player-master/js/player-webgl.js","digestWhenLastPersisted":"c73f5c0fd571f16c91a1ba3f886a28188d4a71cf","preferredLineEnding":null,"nextMarkerId":113,"deserializer":"TextBuffer","version":5},{"id":"b185ed029afb0bd8fbfd0775aa15572c","text":"(function(global) {\n  'use strict';\n\n  var webVR = {\n\n    initWebVR: function() {\n      if (navigator.getVRDevices) {\n        navigator.getVRDevices().then(webVR.vrDeviceCallback);\n      }\n    },\n\n    vrDeviceCallback: function(vrdevs) {\n      for (var i = 0; i < vrdevs.length; ++i) {\n        if (vrdevs[i] instanceof HMDVRDevice) {\n          vrHMD = vrdevs[i];\n          break;\n        }\n      }\n\n      if (!vrHMD)\n        return;\n\n      // Then, find that HMD's position sensor\n      for (i = 0; i < vrdevs.length; ++i) {\n        if (vrdevs[i] instanceof PositionSensorVRDevice &&\n            vrdevs[i].hardwareUnitId == vrHMD.hardwareUnitId)\n        {\n          vrSensor = vrdevs[i];\n          break;\n        }\n      }\n\n      if (!vrSensor) {\n        alert(\"Found an HMD, but didn't find its orientation sensor?\");\n      }\n    }\n\n  };\n\n  global.webVR = webVR;\n\n})(window);\n","defaultMarkerLayerId":"0","markerLayers":{"0":{"id":"0","maintainHistory":false,"markersById":{"4":{"range":{"start":{"row":0,"column":0},"end":{"row":0,"column":1}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"overlap"},"5":{"range":{"start":{"row":41,"column":1},"end":{"row":41,"column":2}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"overlap"}},"version":2},"1":{"id":"1","maintainHistory":false,"markersById":{},"version":2},"2":{"id":"2","maintainHistory":true,"markersById":{"1":{"range":{"start":{"row":0,"column":0},"end":{"row":0,"column":0}},"properties":{"type":"selection"},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}},"version":2},"4":{"id":"4","maintainHistory":false,"markersById":{},"version":2}},"nextMarkerLayerId":5,"history":{"version":3,"nextCheckpointId":1,"undoStack":[],"redoStack":[]},"encoding":"utf8","filePath":"/Users/nansthomas/Downloads/eleVR-Web-Player-master/js/webvr.js","digestWhenLastPersisted":"88f308574ee0626c788484ef6c5878535a96ae63","preferredLineEnding":null,"nextMarkerId":6,"deserializer":"TextBuffer","version":5}]},"workspace":{"deserializer":"Workspace","paneContainer":{"deserializer":"PaneContainer","version":1,"root":{"deserializer":"Pane","id":3,"items":[{"deserializer":"TextEditor","id":4,"softTabs":true,"firstVisibleScreenRow":98,"firstVisibleScreenColumn":0,"displayBuffer":{"deserializer":"DisplayBuffer","id":5,"softWrapped":false,"tokenizedBuffer":{"deserializer":"TokenizedBuffer","bufferPath":"/Users/nansthomas/Downloads/eleVR-Web-Player-master/index.html","bufferId":"a2812ff788e60e75d0b1d50beab682dc","largeFileMode":false},"largeFileMode":false,"foldsMarkerLayerId":"1"},"selectionsMarkerLayerId":"2"},{"deserializer":"TextEditor","id":8,"softTabs":true,"firstVisibleScreenRow":268,"firstVisibleScreenColumn":0,"displayBuffer":{"deserializer":"DisplayBuffer","id":9,"softWrapped":false,"tokenizedBuffer":{"deserializer":"TokenizedBuffer","bufferPath":"/Users/nansthomas/Downloads/eleVR-Web-Player-master/js/controls.js","bufferId":"7ee908e15ce53797e45d09845945d332","largeFileMode":false},"largeFileMode":false,"foldsMarkerLayerId":"1"},"selectionsMarkerLayerId":"2"},{"deserializer":"TextEditor","id":12,"softTabs":true,"firstVisibleScreenRow":197,"firstVisibleScreenColumn":0,"displayBuffer":{"deserializer":"DisplayBuffer","id":13,"softWrapped":false,"tokenizedBuffer":{"deserializer":"TokenizedBuffer","bufferPath":"/Users/nansthomas/Downloads/eleVR-Web-Player-master/js/elevr-player.js","bufferId":"e4bc764678714620432295cdd693b56d","largeFileMode":false},"largeFileMode":false,"foldsMarkerLayerId":"1"},"selectionsMarkerLayerId":"2"},{"deserializer":"TextEditor","id":16,"softTabs":true,"firstVisibleScreenRow":7,"firstVisibleScreenColumn":0,"displayBuffer":{"deserializer":"DisplayBuffer","id":17,"softWrapped":false,"tokenizedBuffer":{"deserializer":"TokenizedBuffer","bufferPath":"/Users/nansthomas/Downloads/eleVR-Web-Player-master/js/phonevr.js","bufferId":"e4424c9d0adcd2738ced8dc01d402957","largeFileMode":false},"largeFileMode":false,"foldsMarkerLayerId":"1"},"selectionsMarkerLayerId":"2"},{"deserializer":"TextEditor","id":20,"softTabs":true,"firstVisibleScreenRow":40,"firstVisibleScreenColumn":0,"displayBuffer":{"deserializer":"DisplayBuffer","id":21,"softWrapped":false,"tokenizedBuffer":{"deserializer":"TokenizedBuffer","bufferPath":"/Users/nansthomas/Downloads/eleVR-Web-Player-master/js/player-webgl.js","bufferId":"c6a309f87ecc991adb3e79290bdd9ec1","largeFileMode":false},"largeFileMode":false,"foldsMarkerLayerId":"1"},"selectionsMarkerLayerId":"2"},{"deserializer":"TextEditor","id":24,"softTabs":true,"firstVisibleScreenRow":0,"firstVisibleScreenColumn":0,"displayBuffer":{"deserializer":"DisplayBuffer","id":25,"softWrapped":false,"tokenizedBuffer":{"deserializer":"TokenizedBuffer","bufferPath":"/Users/nansthomas/Downloads/eleVR-Web-Player-master/js/webvr.js","bufferId":"b185ed029afb0bd8fbfd0775aa15572c","largeFileMode":false},"largeFileMode":false,"foldsMarkerLayerId":"1"},"selectionsMarkerLayerId":"2"}],"activeItemURI":"/Users/nansthomas/Downloads/eleVR-Web-Player-master/js/player-webgl.js","focused":true,"flexScale":1},"activePaneId":3},"packagesWithActiveGrammars":["language-html","language-javascript","language-hyperlink","language-todo"],"destroyedItemURIs":["/Users/nansthomas/Downloads/eleVR-Web-Player-master/lib/util.js","/Users/nansthomas/Downloads/eleVR-Web-Player-master/lib/gl-matrix.js"]},"packageStates":{"fuzzy-finder":{"/Users/nansthomas/Downloads/eleVR-Web-Player-master/index.html":1452813432143,"/Users/nansthomas/Downloads/eleVR-Web-Player-master/js/controls.js":1452813467833,"/Users/nansthomas/Downloads/eleVR-Web-Player-master/js/elevr-player.js":1452813384335,"/Users/nansthomas/Downloads/eleVR-Web-Player-master/js/phonevr.js":1452813387260,"/Users/nansthomas/Downloads/eleVR-Web-Player-master/js/player-webgl.js":1452813547834,"/Users/nansthomas/Downloads/eleVR-Web-Player-master/js/webvr.js":1452813422332},"metrics":{"sessionLength":3816403},"tabs":[{}],"tree-view":{"directoryExpansionStates":{"/Users/nansthomas/Downloads/eleVR-Web-Player-master":{"isExpanded":true,"entries":{"css":{"isExpanded":false,"entries":{}},"js":{"isExpanded":true,"entries":{}},"lib":{"isExpanded":true,"entries":{}}}}},"selectedPath":"/Users/nansthomas/Downloads/eleVR-Web-Player-master/js/player-webgl.js","hasFocus":false,"attached":true,"scrollLeft":0,"scrollTop":0,"width":200}},"fullScreen":false}